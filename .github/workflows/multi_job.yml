name: Advanced CI/CD Pipeline Simulation
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      run-tests:
        description: 'Run test suite'
        type: boolean
        default: true
      deploy-env:
        description: 'Deployment environment'
        type: choice
        options:
          - development
          - staging
          - production
        default: 'development'
      debug-mode:
        description: 'Enable debug mode'
        type: boolean
        default: false

env:
  GLOBAL_VAR: 'shared-across-jobs'
  DEBUG_MODE: ${{ github.event.inputs.debug-mode == 'true' }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up build matrix
        id: set-matrix
        run: |
          echo "matrix={\"node-version\":[\"14\",\"16\",\"18\"],\"os\":[\"ubuntu-latest\",\"windows-latest\"]}" >> $GITHUB_OUTPUT
          
      - name: Generate cache key
        id: cache-key
        run: |
          echo "value=deps-${{ hashFiles('**/package.json') || github.sha }}" >> $GITHUB_OUTPUT
          
      - name: Debug info
        if: env.DEBUG_MODE == 'true'
        run: |
          echo "::notice::Debug mode enabled"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          echo "Event: ${{ github.event_name }}"
          
  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      # Node.js setup removed to avoid dependency errors
          
      - name: Simulate cache dependencies
        run: |
          echo "Simulating dependency caching..."
          echo "Cache key: ${{ needs.setup.outputs.cache-key }}"
            
      - name: Simulate linting
        run: |
          echo "Running linters..."
          if [[ "${{ env.DEBUG_MODE }}" == "true" ]]; then
            echo "::notice::Running in verbose mode"
          fi
          
          # Random pause between 2-7 seconds
          SLEEP_TIME=$(( $RANDOM % 6 + 2 ))
          echo "Linting taking $SLEEP_TIME seconds..."
          sleep $SLEEP_TIME
          
          # 20% chance of linting warnings
          if [[ $(( $RANDOM % 5 )) -eq 0 ]]; then
            echo "::warning::Found $(( $RANDOM % 10 + 1 )) style issues"
            echo "Linting completed with warnings"
          else
            echo "Linting completed successfully"
          fi
          
  build:
    needs: [setup, lint]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      # Node.js setup removed to avoid dependency errors
      - name: Simulate Node.js ${{ matrix.node-version }} environment
        run: echo "Simulating Node.js ${{ matrix.node-version }} environment on ${{ matrix.os }}"
          
      - name: Simulate cache dependencies
        run: |
          echo "Simulating dependency caching..."
          echo "Cache key: ${{ needs.setup.outputs.cache-key }}-${{ matrix.os }}-${{ matrix.node-version }}"
            
      - name: Build project
        run: |
          echo "Building project with Node.js ${{ matrix.node-version }} on ${{ matrix.os }}"
          echo "GLOBAL_VAR=${{ env.GLOBAL_VAR }}"
          
          # Random pause between 5-15 seconds to simulate build time
          SLEEP_TIME=$(( $RANDOM % 11 + 5 ))
          echo "Building for $SLEEP_TIME seconds..."
          sleep $SLEEP_TIME
          
          # 15% chance of build failure, but only on specific combinations
          if [[ "${{ matrix.node-version }}" == "14" && "${{ matrix.os }}" == "windows-latest" && $(( $RANDOM % 100 )) -lt 15 ]]; then
            echo "::error::Build failed on Windows with Node 14"
            echo "Simulated compatibility issue with older Node version on Windows"
            exit 1
          fi
          
          echo "Build completed successfully"
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.os }}-${{ matrix.node-version }}
          path: |
            README.md
            .github
          retention-days: 1
          
  test:
    if: github.event.inputs.run-tests != 'false'
    needs: [setup, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      # Node.js setup removed to avoid dependency errors
      - name: Simulate Node.js environment
        run: echo "Simulating Node.js environment for testing"
          
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-ubuntu-latest-16
          
      - name: Run tests
        run: |
          echo "Running test suite..."
          
          # Variable test duration between 3-12 seconds
          SLEEP_TIME=$(( $RANDOM % 10 + 3 ))
          echo "Tests running for $SLEEP_TIME seconds..."
          sleep $SLEEP_TIME
          
          # Simulate different types of test outcomes
          RANDOM_NUM=$(( $RANDOM % 10 ))
          if [[ $RANDOM_NUM -eq 0 ]]; then
            # 10% chance of complete failure
            echo "::error::Multiple test failures detected!"
            echo "Simulating critical test failures"
            exit 1
          elif [[ $RANDOM_NUM -eq 1 || $RANDOM_NUM -eq 2 ]]; then
            # 20% chance of partial failure with warnings
            echo "::warning::Some tests are flaky ($(( $RANDOM % 5 + 1 )) failures)"
            echo "Continuing despite minor test issues"
          else
            # 70% chance of success
            echo "All tests passed!"
          fi
          
  deploy:
    needs: [build, test]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.deploy-env || 'development' }}
    concurrency: 
      group: deploy-${{ github.event.inputs.deploy-env || 'development' }}
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Download artifacts
        uses: actions/download-artifact@v3
        
      - name: Deploy to ${{ github.event.inputs.deploy-env || 'development' }}
        run: |
          echo "::notice::Deploying to ${{ github.event.inputs.deploy-env || 'development' }} environment"
          echo "Deployment started at $(date)"
          
          # Variable deployment time based on environment
          if [[ "${{ github.event.inputs.deploy-env }}" == "production" ]]; then
            # Production deployments take longer
            SLEEP_TIME=$(( $RANDOM % 10 + 10 ))
          elif [[ "${{ github.event.inputs.deploy-env }}" == "staging" ]]; then
            # Staging is medium
            SLEEP_TIME=$(( $RANDOM % 8 + 5 ))
          else
            # Dev is fastest
            SLEEP_TIME=$(( $RANDOM % 5 + 3 ))
          fi
          
          echo "Deploying (estimated time: $SLEEP_TIME seconds)..."
          
          # Show progress updates during longer deployments
          if [[ $SLEEP_TIME -gt 8 ]]; then
            HALF_TIME=$(( SLEEP_TIME / 2 ))
            sleep $HALF_TIME
            echo "::notice::Deployment 50% complete..."
            sleep $(( SLEEP_TIME - HALF_TIME ))
          else
            sleep $SLEEP_TIME
          fi
          
          # 5% chance of deployment issues in production
          if [[ "${{ github.event.inputs.deploy-env }}" == "production" && $(( $RANDOM % 20 )) -eq 0 ]]; then
            echo "::warning::Deployment completed with warnings"
            echo "Some services may need manual verification"
          else
            echo "Deployment completed successfully!"
          fi
          
  notify:
    needs: [lint, build, test, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Workflow status
        run: |
          echo "::notice::Workflow Summary"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Deploy: ${{ needs.deploy.result }}"
          
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" && \
                ("${{ needs.test.result }}" == "success" || "${{ needs.test.result }}" == "skipped") && \
                "${{ needs.deploy.result }}" == "success" ]]; then
            echo "::notice::üéâ Pipeline completed successfully!"
          else
            echo "::error::‚ùå Pipeline completed with issues"
            # Don't fail the workflow here to ensure notification always completes
          fi